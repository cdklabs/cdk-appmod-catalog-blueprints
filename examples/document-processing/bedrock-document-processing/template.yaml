Resources:
  IDPBrokerEventBrokerKMSKeyD7D34780:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::284546856933:root
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:GenerateDataKey
            Condition:
              StringEquals:
                aws:SourceAccount: "284546856933"
                aws:SourceArn: arn:aws:events:us-east-1:284546856933:event-bus/idp-broker
                kms:EncryptionContext:aws:events:event-bus:arn: arn:aws:events:us-east-1:284546856933:event-bus/idp-broker
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource: "*"
        Version: "2012-10-17"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/IDPBroker/EventBrokerKMSKey/Resource
  IDPBrokerEventBus3145175C:
    Type: AWS::Events::EventBus
    Properties:
      KmsKeyIdentifier:
        Fn::GetAtt:
          - IDPBrokerEventBrokerKMSKeyD7D34780
          - Arn
      Name: idp-broker
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/IDPBroker/EventBus/Resource
  BedrockDocumentProcessingDocumentProcessingBucket32BD72F9:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/DocumentProcessingBucket/Resource
  BedrockDocumentProcessingDocumentProcessingBucketNotificationsE331B84F:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: BedrockDocumentProcessingDocumentProcessingBucket32BD72F9
      NotificationConfiguration:
        QueueConfigurations:
          - Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: prefix
                    Value: raw/
            QueueArn:
              Fn::GetAtt:
                - BedrockDocumentProcessingDocumentProcessingQueue7C8A9064
                - Arn
      Managed: true
      SkipDestinationValidation: false
    DependsOn:
      - BedrockDocumentProcessingDocumentProcessingQueuePolicy6CFEB80A
      - BedrockDocumentProcessingDocumentProcessingQueue7C8A9064
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/DocumentProcessingBucket/Notifications/Resource
  BedrockDocumentProcessingDocumentProcessingQueue7C8A9064:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/DocumentProcessingQueue/Resource
  BedrockDocumentProcessingDocumentProcessingQueuePolicy6CFEB80A:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::GetAtt:
                    - BedrockDocumentProcessingDocumentProcessingBucket32BD72F9
                    - Arn
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Fn::GetAtt:
                - BedrockDocumentProcessingDocumentProcessingQueue7C8A9064
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: BedrockDocumentProcessingDocumentProcessingQueue7C8A9064
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/DocumentProcessingQueue/Policy/Resource
  BedrockDocumentProcessingDocumentProcessingTableD87A7B20:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: DocumentId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: DocumentId
          KeyType: HASH
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/DocumentProcessingTable/Resource
  BedrockDocumentProcessingClassificationLambdaRole1E1ED4B1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: s3:GetObject
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - Fn::GetAtt:
                          - BedrockDocumentProcessingDocumentProcessingBucket32BD72F9
                          - Arn
                      - /*
              - Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Effect: Allow
                Resource:
                  - arn:aws:bedrock:*::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0
                  - arn:aws:bedrock:us-east-1:284546856933:inference-profile/us.anthropic.claude-3-7-sonnet-20250219-v1:0
            Version: "2012-10-17"
          PolicyName: BedrockInvokePolicy
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/ClassificationLambdaRole/Resource
  BedrockDocumentProcessingClassificationLambdaRoleDefaultPolicy9EE9103C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action: logs:CreateLogGroup
            Effect: Allow
            Resource: arn:aws:logs:us-east-1:284546856933:log-group:/aws/lambda/bedrockdocumentprocessingstackbedrockdocumentprocessingb9193c39
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:us-east-1:284546856933:log-group:/aws/lambda/bedrockdocumentprocessingstackbedrockdocumentprocessingb9193c39:*
        Version: "2012-10-17"
      PolicyName: BedrockDocumentProcessingClassificationLambdaRoleDefaultPolicy9EE9103C
      Roles:
        - Ref: BedrockDocumentProcessingClassificationLambdaRole1E1ED4B1
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/ClassificationLambdaRole/DefaultPolicy/Resource
  BedrockDocumentProcessingBedrockClassificationFunctionF353B5B6:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-284546856933-us-east-1
        S3Key: 1b65eb8ed6c2282d088081947a5aff9a68ce58657c74c7070ac52382ffdd768f.zip
      Environment:
        Variables:
          MODEL_ID: us.anthropic.claude-3-7-sonnet-20250219-v1:0
          PROMPT: "

            \  Analyze the document below, and classify the type of document it is (eg. INVOICE, IDENTITY_DOCUMENT, RECEIPT, etc). The result should be in JSON and should follow the following structure (only respond in JSON with the following structure and do not use markdown to indicate the json, just output plain old json with nothing else):


            \  {

            \      documentClassification: <CLASSIFICATION>

            \  }


            \  Attached document is as follows:


            \  "
      FunctionName: bedrockdocumentprocessingstackbedrockdocumentprocessingb9193c39
      Handler: index.handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
          - BedrockDocumentProcessingClassificationLambdaRole1E1ED4B1
          - Arn
      Runtime: python3.13
      Timeout: 300
      TracingConfig:
        Mode: Active
    DependsOn:
      - BedrockDocumentProcessingClassificationLambdaRoleDefaultPolicy9EE9103C
      - BedrockDocumentProcessingClassificationLambdaRole1E1ED4B1
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/BedrockClassificationFunction/Resource
      aws:asset:path: asset.1b65eb8ed6c2282d088081947a5aff9a68ce58657c74c7070ac52382ffdd768f
      aws:asset:is-bundled: false
      aws:asset:property: Code
  BedrockDocumentProcessingProcessingLambdaRoleDAF4EDFA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: s3:GetObject
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - Fn::GetAtt:
                          - BedrockDocumentProcessingDocumentProcessingBucket32BD72F9
                          - Arn
                      - /*
              - Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Effect: Allow
                Resource:
                  - arn:aws:bedrock:*::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0
                  - arn:aws:bedrock:us-east-1:284546856933:inference-profile/us.anthropic.claude-3-7-sonnet-20250219-v1:0
            Version: "2012-10-17"
          PolicyName: BedrockInvokePolicy
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/ProcessingLambdaRole/Resource
  BedrockDocumentProcessingProcessingLambdaRoleDefaultPolicyE296C874:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action: logs:CreateLogGroup
            Effect: Allow
            Resource: arn:aws:logs:us-east-1:284546856933:log-group:/aws/lambda/bedrockdocumentprocessingstackbedrockdocumentprocessingb9193c39
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:us-east-1:284546856933:log-group:/aws/lambda/bedrockdocumentprocessingstackbedrockdocumentprocessingb9193c39:*
        Version: "2012-10-17"
      PolicyName: BedrockDocumentProcessingProcessingLambdaRoleDefaultPolicyE296C874
      Roles:
        - Ref: BedrockDocumentProcessingProcessingLambdaRoleDAF4EDFA
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/ProcessingLambdaRole/DefaultPolicy/Resource
  BedrockDocumentProcessingBedrockExtractionFunctionFA8B5A2F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-284546856933-us-east-1
        S3Key: 1b65eb8ed6c2282d088081947a5aff9a68ce58657c74c7070ac52382ffdd768f.zip
      Environment:
        Variables:
          MODEL_ID: us.anthropic.claude-3-7-sonnet-20250219-v1:0
          PROMPT: "

            \  The document below has been classified as [ACTUAL_CLASSIFICATION]. Extract important entities from the document and return the result as JSON following the structure below (only respond in JSON with the following structure and do not use markdown to indicate the json, just output plain old json with nothing else):


            \  {

            \      documentClassification: <CLASSIFICATION>,

            \      result: {

            \        entities: [

            \            {

            \                type: <TYPE OF ENTITY>

            \                value: <VALUE OF ENTITY>

            \            },

            \            ...

            \        ]

            \      }

            \  }


            \  Attached document is as follows:


            \  "
      FunctionName: bedrockdocumentprocessingstackbedrockdocumentprocessingb9193c39
      Handler: index.handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
          - BedrockDocumentProcessingProcessingLambdaRoleDAF4EDFA
          - Arn
      Runtime: python3.13
      Timeout: 300
      TracingConfig:
        Mode: Active
    DependsOn:
      - BedrockDocumentProcessingProcessingLambdaRoleDefaultPolicyE296C874
      - BedrockDocumentProcessingProcessingLambdaRoleDAF4EDFA
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/BedrockExtractionFunction/Resource
      aws:asset:path: asset.1b65eb8ed6c2282d088081947a5aff9a68ce58657c74c7070ac52382ffdd768f
      aws:asset:is-bundled: false
      aws:asset:property: Code
  BedrockDocumentProcessingStateMachineRole4C2E7AE2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:CopyObject
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - Fn::GetAtt:
                          - BedrockDocumentProcessingDocumentProcessingBucket32BD72F9
                          - Arn
                      - /*
              - Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Effect: Allow
                Resource:
                  Fn::GetAtt:
                    - BedrockDocumentProcessingDocumentProcessingTableD87A7B20
                    - Arn
            Version: "2012-10-17"
          PolicyName: StateMachineExecutionPolicy
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/StateMachineRole/Resource
  BedrockDocumentProcessingStateMachineRoleDefaultPolicy9CFD299A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - arn:aws:dynamodb:us-east-1:284546856933:table/
                  - Ref: BedrockDocumentProcessingDocumentProcessingTableD87A7B20
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - BedrockDocumentProcessingBedrockClassificationFunctionF353B5B6
                  - Arn
              - Fn::GetAtt:
                  - BedrockDocumentProcessingBedrockExtractionFunctionFA8B5A2F
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - BedrockDocumentProcessingBedrockClassificationFunctionF353B5B6
                        - Arn
                    - :*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - BedrockDocumentProcessingBedrockExtractionFunctionFA8B5A2F
                        - Arn
                    - :*
          - Action:
              - s3:copyObject
              - s3:deleteObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - BedrockDocumentProcessingDocumentProcessingBucket32BD72F9
                      - Arn
                  - /*
          - Action: events:PutEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - IDPBrokerEventBus3145175C
                - Arn
          - Action:
              - logs:CreateLogDelivery
              - logs:DeleteLogDelivery
              - logs:DescribeLogGroups
              - logs:DescribeResourcePolicies
              - logs:GetLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:UpdateLogDelivery
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BedrockDocumentProcessingStateMachineRoleDefaultPolicy9CFD299A
      Roles:
        - Ref: BedrockDocumentProcessingStateMachineRole4C2E7AE2
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/StateMachineRole/DefaultPolicy/Resource
  BedrockDocumentProcessingWorkflowLogGroup031AC5B7:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/Workflow-LogGroup/Resource
  BedrockDocumentProcessingWorkflow1DE3A299:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"InitMetadataEntry","States":{"InitMetadataEntry":{"Next":"ClassificationStep","Type":"Task","ResultPath":null,"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::dynamodb:putItem","Parameters":{"Item":{"DocumentId":{"S.$":"$.documentId"},"Bucket":{"S.$":"$.bucket"},"Key":{"S.$":"$.key"},"WorkflowStatus":{"S":"pending"}},"TableName":"
            - Ref: BedrockDocumentProcessingDocumentProcessingTableD87A7B20
            - '"}},"ClassificationStep":{"Next":"ClassificationSuccessUpdate","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"ClassificationFailDDBUpdate"}],"Type":"Task","ResultPath":"$.classificationResult","ResultSelector":{"documentClassification.$":"$.Payload.documentClassification"},"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - BedrockDocumentProcessingBedrockClassificationFunctionF353B5B6
                - Arn
            - '","Payload.$":"$"}},"ClassificationSuccessUpdate":{"Next":"ProcessingStep","Type":"Task","ResultPath":null,"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::dynamodb:updateItem","Parameters":{"Key":{"DocumentId":{"S.$":"$.documentId"}},"TableName":"
            - Ref: BedrockDocumentProcessingDocumentProcessingTableD87A7B20
            - '","ExpressionAttributeValues":{":newStatus":{"S":"classification-complete"},":classificationResult":{"S.$":"States.JsonToString($.classificationResult)"}},"UpdateExpression":"SET WorkflowStatus = :newStatus, ClassificationResult = :classificationResult"}},"ProcessingStep":{"Next":"ProcessingSuccessUpdate","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"ProcessingFailDDBUpdate"}],"Type":"Task","ResultPath":"$.processingResult","ResultSelector":{"documentClassification.$":"$.Payload.documentClassification","result.$":"$.Payload.result"},"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - BedrockDocumentProcessingBedrockExtractionFunctionFA8B5A2F
                - Arn
            - '","Payload.$":"$"}},"ProcessingSuccessUpdate":{"Next":"WorkflowCompleteUpdate","Type":"Task","ResultPath":null,"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::dynamodb:updateItem","Parameters":{"Key":{"DocumentId":{"S.$":"$.documentId"}},"TableName":"
            - Ref: BedrockDocumentProcessingDocumentProcessingTableD87A7B20
            - '","ExpressionAttributeValues":{":newStatus":{"S":"processing-complete"},":processingResult":{"S.$":"States.JsonToString($.processingResult)"}},"UpdateExpression":"SET WorkflowStatus = :newStatus, ProcessingResult = :processingResult"}},"WorkflowCompleteUpdate":{"Next":"CopyToProcessed","Type":"Task","ResultPath":null,"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::dynamodb:updateItem","Parameters":{"Key":{"DocumentId":{"S.$":"$.documentId"}},"TableName":"
            - Ref: BedrockDocumentProcessingDocumentProcessingTableD87A7B20
            - '","ExpressionAttributeValues":{":newStatus":{"S":"complete"}},"UpdateExpression":"SET WorkflowStatus = :newStatus"}},"CopyToProcessed":{"Next":"DeleteFromRawSuccess","Type":"Task","ResultPath":null,"Resource":"arn:'
            - Ref: AWS::Partition
            - ":states:::aws-sdk:s3:copyObject\",\"Parameters\":{\"Bucket.$\":\"$.bucket\",\"CopySource.$\":\"States.Format('{}/{}', $.bucket, $.key)\",\"Key.$\":\"States.Format('processed/{}', $.filename)\"}},\"DeleteFromRawSuccess\":{\"Next\":\"SfnEbPutEventChain-document-processed-successful\",\"Type\":\"Task\",\"ResultPath\":null,\"Resource\":\"arn:"
            - Ref: AWS::Partition
            - ':states:::aws-sdk:s3:deleteObject","Parameters":{"Bucket.$":"$.bucket","Key.$":"$.key"}},"SfnEbPutEventChain-document-processed-successful":{"End":true,"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::events:putEvents","Parameters":{"Entries":[{"Detail":{"documentId.$":"$.documentId","bucket.$":"$.bucket","filename.$":"$.filename","classification.$":"$.classificationResult.documentClassification"},"DetailType":"document-processed-successful","EventBusName":"
            - Fn::GetAtt:
                - IDPBrokerEventBus3145175C
                - Arn
            - '","Source":"intelligent-document-processing"}]}},"ProcessingFailDDBUpdate":{"Next":"CopyToFailed","Type":"Task","ResultPath":null,"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::dynamodb:updateItem","Parameters":{"Key":{"DocumentId":{"S.$":"$.documentId"}},"TableName":"
            - Ref: BedrockDocumentProcessingDocumentProcessingTableD87A7B20
            - '","ExpressionAttributeValues":{":newStatus":{"S":"processing-failure"}},"UpdateExpression":"SET WorkflowStatus = :newStatus"}},"CopyToFailed":{"Next":"DeleteFromRaw","Type":"Task","ResultPath":null,"Resource":"arn:'
            - Ref: AWS::Partition
            - ":states:::aws-sdk:s3:copyObject\",\"Parameters\":{\"Bucket.$\":\"$.bucket\",\"CopySource.$\":\"States.Format('{}/{}', $.bucket, $.key)\",\"Key.$\":\"States.Format('failed/{}', $.filename)\"}},\"ClassificationFailDDBUpdate\":{\"Next\":\"CopyToFailed\",\"Type\":\"Task\",\"ResultPath\":null,\"Resource\":\"arn:"
            - Ref: AWS::Partition
            - :states:::dynamodb:updateItem","Parameters":{"Key":{"DocumentId":{"S.$":"$.documentId"}},"TableName":"
            - Ref: BedrockDocumentProcessingDocumentProcessingTableD87A7B20
            - '","ExpressionAttributeValues":{":newStatus":{"S":"classification-failure"}},"UpdateExpression":"SET WorkflowStatus = :newStatus"}},"DeleteFromRaw":{"Next":"SfnEbPutEventChain-document-processing-failed","Type":"Task","ResultPath":null,"Resource":"arn:'
            - Ref: AWS::Partition
            - ':states:::aws-sdk:s3:deleteObject","Parameters":{"Bucket.$":"$.bucket","Key.$":"$.key"}},"SfnEbPutEventChain-document-processing-failed":{"End":true,"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::events:putEvents","Parameters":{"Entries":[{"Detail":{"documentId.$":"$.documentId","bucket.$":"$.bucket","filename.$":"$.filename"},"DetailType":"document-processing-failed","EventBusName":"
            - Fn::GetAtt:
                - IDPBrokerEventBus3145175C
                - Arn
            - '","Source":"intelligent-document-processing"}]}}},"TimeoutSeconds":900}'
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn:
                Fn::GetAtt:
                  - BedrockDocumentProcessingWorkflowLogGroup031AC5B7
                  - Arn
        Level: ALL
      RoleArn:
        Fn::GetAtt:
          - BedrockDocumentProcessingStateMachineRole4C2E7AE2
          - Arn
      TracingConfiguration:
        Enabled: true
    DependsOn:
      - BedrockDocumentProcessingStateMachineRoleDefaultPolicy9CFD299A
      - BedrockDocumentProcessingStateMachineRole4C2E7AE2
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/Workflow/Resource
  BedrockDocumentProcessingSQSConsumerRole635DEB7E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: logs:CreateLogGroup
                Effect: Allow
                Resource: arn:aws:logs:us-east-1:284546856933:log-group:/aws/lambda/bedrockdocumentprocessingstackbedrockdocumentprocessingb9193c39
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:us-east-1:284546856933:log-group:/aws/lambda/bedrockdocumentprocessingstackbedrockdocumentprocessingb9193c39:*
              - Action: states:StartExecution
                Effect: Allow
                Resource:
                  Ref: BedrockDocumentProcessingWorkflow1DE3A299
            Version: "2012-10-17"
          PolicyName: SQSConsumerExecutionPolicy
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/SQSConsumerRole/Resource
  BedrockDocumentProcessingSQSConsumerRoleDefaultPolicyD8FDA210:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - BedrockDocumentProcessingDocumentProcessingQueue7C8A9064
                - Arn
        Version: "2012-10-17"
      PolicyName: BedrockDocumentProcessingSQSConsumerRoleDefaultPolicyD8FDA210
      Roles:
        - Ref: BedrockDocumentProcessingSQSConsumerRole635DEB7E
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/SQSConsumerRole/DefaultPolicy/Resource
  BedrockDocumentProcessingSQSConsumerD94CC2BF:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-284546856933-us-east-1
        S3Key: 6f76e1cf9d5b15b68485e5d27c1caace38f978b7fcb5312ff77cffcf02cc1dac.zip
      Description: Consumes SQS messages and triggers Step Functions executions for document processing
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Ref: BedrockDocumentProcessingWorkflow1DE3A299
      FunctionName: bedrockdocumentprocessingstackbedrockdocumentprocessingb9193c39
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BedrockDocumentProcessingSQSConsumerRole635DEB7E
          - Arn
      Runtime: nodejs22.x
      Timeout: 300
      TracingConfig:
        Mode: Active
    DependsOn:
      - BedrockDocumentProcessingSQSConsumerRoleDefaultPolicyD8FDA210
      - BedrockDocumentProcessingSQSConsumerRole635DEB7E
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/SQSConsumer/Resource
      aws:asset:path: asset.6f76e1cf9d5b15b68485e5d27c1caace38f978b7fcb5312ff77cffcf02cc1dac
      aws:asset:is-bundled: false
      aws:asset:property: Code
  BedrockDocumentProcessingSQSConsumerSqsEventSourceBedrockDocumentProcessingStackBedrockDocumentProcessingDocumentProcessingQueue6F52048332DE486A:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn:
        Fn::GetAtt:
          - BedrockDocumentProcessingDocumentProcessingQueue7C8A9064
          - Arn
      FunctionName:
        Ref: BedrockDocumentProcessingSQSConsumerD94CC2BF
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: 5
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BedrockDocumentProcessing/SQSConsumer/SqsEventSource:BedrockDocumentProcessingStackBedrockDocumentProcessingDocumentProcessingQueue6F520483/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |-
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              notification_configuration = props["NotificationConfiguration"]
              managed = props.get('Managed', 'true').lower() == 'true'
              skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
              stack_id = event['StackId']
              old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
              if managed:
                config = handle_managed(event["RequestType"], notification_configuration)
              else:
                config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
              s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
            def get_id(n):
              n['Id'] = ''
              sorted_notifications = sort_filter_rules(n)
              strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
              return f"{stack_id}-{hash(strToHash)}"
            def with_id(n):
              n['Id'] = get_id(n)
              return n

            external_notifications = {}
            existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
            for t in CONFIGURATION_TYPES:
              if request_type == 'Update':
                  old_incoming_ids = [get_id(n) for n in old.get(t, [])]
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
              elif request_type == 'Delete':
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
              elif request_type == 'Create':
                  external_notifications[t] = [n for n in existing_notifications.get(t, [])]
            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            if request_type == 'Delete':
              return external_notifications

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))

          def sort_filter_rules(json_obj):
            if not isinstance(json_obj, dict):
                return json_obj
            for key, value in json_obj.items():
                if isinstance(value, dict):
                    json_obj[key] = sort_filter_rules(value)
                elif isinstance(value, list):
                    json_obj[key] = [sort_filter_rules(item) for item in value]
            if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
                filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
                sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
                json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
            return json_obj
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.11
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/11R227CMAz9Ft5DRtkXALsIARKj2zNyU9OFtklXJ0VVlH+fktLu8pJzbMc5Ps6SL5OEL2Zwo7nIy3klM+5SA6JkcKOzK2viboc921zUDnvPsENliLvngGtLoTByz8hgc7FKGKkVnQ1QOV1tZV7g0ZoYEdtDneWwVZ0ukT31Cmp9tGZrsGYbqKrVjVJsOynG4keTg8FQ94weuVtbUaIJ6nc2wBoIPaMv4u7NosVwYSDxPOpKin5KDqFneZTIM+7eIatiUySeSai5O+khF/HnibG7ila4e7kbD7WJR7uptq3AAzSNVMW0sT/Z4OoMRGiIrwKwShfE3V4Xr622Tega+b89xw8zeADxKVUc9HfsfRwdKaqxiUSR1EARxZXOkV/poVsueJLwZHYlKeetVUbWyE8DfgO+qpFVLQIAAA==
    Metadata:
      aws:cdk:path: BedrockDocumentProcessingStack/CDKMetadata/Default
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

