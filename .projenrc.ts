import { CdklabsConstructLibrary } from 'cdklabs-projen-project-types';
import { DependencyType } from 'projen';
import { NpmAccess } from 'projen/lib/javascript';
const project = new CdklabsConstructLibrary({
  author: 'AWS AppMod Catalog Team',
  authorAddress: 'appmod-catalog@amazon.com',
  cdkVersion: '2.216.0',
  defaultReleaseBranch: 'main',
  jsiiVersion: '~5.9.5',
  name: 'appmod-catalog-blueprints',
  description: 'Serverless infrastructure components organized by business use cases',
  projenrcTs: true,
  npmAccess: NpmAccess.PUBLIC,
  repositoryUrl: 'git@github.com:cdklabs/cdk-appmod-catalog-blueprints.git',
  sampleCode: false,
  integrationTestAutoDiscover: false,
  docgen: process.env.SKIP_DOCGEN !== 'true',
  private: false,
  peerDeps: ['@aws-cdk/aws-lambda-python-alpha@2.192.0-alpha.0', 'aws-cdk-lib'],
  // Configure source and lib directories for use cases
  srcdir: 'use-cases',
  libdir: 'lib',
  gitignore: [
    'cdk.out',
    // macOS files
    '.DS_Store',
    '.DS_Store?',
    '._*',
    '.Spotlight-V100',
    '.Trashes',
    'ehthumbs.db',
    'Thumbs.db',
    // TypeScript compiled files
    '*.d.ts',
    '*.js.map',
    '*.d.ts.map',
    // But keep specific JS files that are source code (not compiled)
    '!functions/**/*.js',
    '!**/lambda/**/*.js',
    '!**/resources/**/*.js',
    // Ignore TypeScript generated files, but keep specific paths
    '**/*.js',
    '**/*.d.ts',
    // Keep node_modules
    '!node_modules/**/*.js',
    '!node_modules/**/*.d.ts',
    // Keep utilities Lambda resources JS files, but exclude compiled utilities
    '!use-cases/utilities/**/resources/**/*.js',
    '!**/resources/**/*.js',
    // Keep specific JS files that are not generated by tsc
    '!demo/webapp/app/server.js',
    '!demo/webapp/lambda-init/index.js',
    // Ignore macOS system files
    '.DS_Store',
    '**/.DS_Store',
  ],
  packageName: '@cdklabs/cdk-appmod-catalog-blueprints',
  majorVersion: 1,
});

project.postCompileTask.exec('cp -R use-cases/document-processing/resources lib/document-processing/', {
  name: 'Copy custom resources needed by Document Processing',
});

project.postCompileTask.exec('cp -R use-cases/utilities/data-loader-lambda lib/utilities/', {
  name: 'Copy custom resource needed by the Data Loader',
});

project.postCompileTask.exec('cp -R use-cases/utilities/lambda_layers lib/utilities/', {
  name: 'Copy Lambda layers files',
});

project.postCompileTask.exec('cp -R use-cases/utilities/observability/resources lib/utilities/observability/', {
  name: 'Copy custom resource needed by Observability',
});

project.eslint?.addRules({
  'import/no-extraneous-dependencies': ['error', { devDependencies: true }],
});

project.deps.addDependency('cdk-nag', DependencyType.TEST);

// Add CDK Nag test tasks for each use case
project.addTask('test:cdk-nag:document-processing', {
  description: 'Run CDK Nag security tests for document processing use case',
  exec: 'jest --testPathPattern="document-processing.*nag\\.test\\.(ts|js)$" --verbose',
});

project.addTask('test:cdk-nag:webapp', {
  description: 'Run CDK Nag security tests for webapp use case',
  exec: 'jest --testPathPattern="webapp.*nag\\.test\\.(ts|js)$" --verbose',
});

project.addTask('test:cdk-nag:all', {
  description: 'Run all CDK Nag security tests',
  exec: 'jest --testPathPattern=".*nag\\.test\\.(ts|js)$" --verbose',
});

// Add webapp-specific test tasks for better test organization
project.addTask('test:webapp', {
  description: 'Run all webapp use case tests',
  exec: 'jest --testPathPattern="use-cases/webapp/tests/.*\\.test\\.(ts|js)$" --passWithNoTests --updateSnapshot',
});

project.addTask('test:webapp:unit', {
  description: 'Run webapp unit tests (excluding nag tests)',
  exec: 'jest --testPathPattern="use-cases/webapp/tests/.*\\.test\\.(ts|js)$" --testPathIgnorePatterns=".*nag\\.test\\.(ts|js)$" --passWithNoTests --updateSnapshot',
});

project.addTask('test:webapp:quickstart', {
  description: 'Run webapp quickstart tests only',
  exec: 'jest --testPathPattern="use-cases/webapp/tests/webapp-quickstart\\.test\\.(ts|js)$" --passWithNoTests --updateSnapshot',
});

project.addTask('test:webapp:frontend', {
  description: 'Run webapp frontend construct tests only',
  exec: 'jest --testPathPattern="use-cases/webapp/tests/frontend-construct\\.test\\.(ts|js)$" --passWithNoTests --updateSnapshot',
});

project.addTask('test:webapp:core', {
  description: 'Run core webapp construct tests only',
  exec: 'jest --testPathPattern="use-cases/webapp/tests/webapp\\.test\\.(ts|js)$" --passWithNoTests --updateSnapshot',
});

// Add document-processing test tasks for consistency
project.addTask('test:document-processing', {
  description: 'Run all document processing use case tests',
  exec: 'jest --testPathPattern="use-cases/document-processing/tests/.*\\.test\\.(ts|js)$" --passWithNoTests --updateSnapshot',
});

project.addTask('test:document-processing:unit', {
  description: 'Run document processing unit tests (excluding nag tests)',
  exec: 'jest --testPathPattern="use-cases/document-processing/tests/.*\\.test\\.(ts|js)$" --testPathIgnorePatterns=".*nag\\.test\\.(ts|js)$" --passWithNoTests --updateSnapshot',
});

// Add security test phase that includes CDK Nag
project.addTask('test:security', {
  description: 'Run security-focused tests including CDK Nag analysis',
});

const securityTask = project.tasks.tryFind('test:security');
const cdkNagAllTask = project.tasks.tryFind('test:cdk-nag:all');

if (securityTask && cdkNagAllTask) {
  securityTask.spawn(cdkNagAllTask);
}

const packageTask = project.tasks.tryFind('package');

if (packageTask) {
  packageTask.prependExec('NODE_OPTIONS="--max-old-space-size=8192"');
}

// Note: CDK Nag tests are run separately via test:cdk-nag:all task
// They are not integrated with the main test task to avoid duplication

// Configure Go proxy for JSII packaging to handle network connectivity issues
// This ensures Go modules are downloaded directly from source repositories
// instead of relying on proxy.golang.org which may not be accessible
const packageGoTask = project.tasks.tryFind('package:go');
if (packageGoTask) {
  packageGoTask.env('GOPROXY', 'direct');
}

// Add fast build task that skips docgen
project.addTask('build:fast', {
  description: 'Fast build without documentation generation',
  steps: [
    { spawn: 'default' },
    { spawn: 'pre-compile' },
    { spawn: 'compile' },
    { spawn: 'post-compile' },
    { spawn: 'test' },
    { spawn: 'package:js' }, // Only JS package for speed
  ],
});

project.addFields({
  files: ['lib/', '.jsii'],
});
project.synth();
