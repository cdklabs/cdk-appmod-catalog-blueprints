{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "build:fast": {
      "name": "build:fast",
      "description": "Fast build without documentation generation",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package:js"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "git log --oneline -1 | grep -qv \"chore(release):\""
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false"
      },
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ use-cases test build-tools projenrc .projenrc.ts",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "integ": {
      "name": "integ",
      "description": "Run integration snapshot tests",
      "steps": [
        {
          "exec": "yarn integ-runner --language typescript",
          "receiveArgs": true
        }
      ]
    },
    "integ:update": {
      "name": "integ:update",
      "description": "Run and update integration snapshot tests",
      "steps": [
        {
          "exec": "yarn integ-runner --language typescript --update-on-failed",
          "receiveArgs": true
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "NODE_OPTIONS=\"--max-old-space-size=8192\""
        },
        {
          "spawn": "package:js",
          "condition": "node -e \"if (!process.env.CI) process.exit(1)\""
        },
        {
          "spawn": "package-all",
          "condition": "node -e \"if (process.env.CI) process.exit(1)\""
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:java"
        },
        {
          "spawn": "package:python"
        },
        {
          "spawn": "package:dotnet"
        }
      ]
    },
    "package:dotnet": {
      "name": "package:dotnet",
      "description": "Create dotnet language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target dotnet"
        }
      ]
    },
    "package:java": {
      "name": "package:java",
      "description": "Create java language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target java"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        },
        {
          "spawn": "rosetta:extract"
        },
        {
          "exec": "cp -R use-cases/document-processing/resources lib/document-processing/",
          "name": "Copy custom resources needed by Document Processing"
        },
        {
          "exec": "cp -R use-cases/utilities/data-loader-lambda lib/utilities/",
          "name": "Copy custom resource needed by the Data Loader"
        },
        {
          "exec": "cp -R use-cases/utilities/lambda_layers lib/utilities/",
          "name": "Copy Lambda layers files"
        },
        {
          "exec": "cp -R use-cases/utilities/observability/resources lib/utilities/observability/",
          "name": "Copy custom resource needed by Observability"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true",
        "MAJOR": "1"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "rosetta:extract": {
      "name": "rosetta:extract",
      "description": "Test rosetta extract",
      "steps": [
        {
          "exec": "yarn --silent jsii-rosetta extract --strict"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ"
        }
      ]
    },
    "test:cdk-nag:all": {
      "name": "test:cdk-nag:all",
      "description": "Run all CDK Nag security tests",
      "steps": [
        {
          "exec": "jest --testPathPattern=\".*nag\\.test\\.(ts|js)$\" --verbose"
        }
      ]
    },
    "test:cdk-nag:document-processing": {
      "name": "test:cdk-nag:document-processing",
      "description": "Run CDK Nag security tests for document processing use case",
      "steps": [
        {
          "exec": "jest --testPathPattern=\"document-processing.*nag\\.test\\.(ts|js)$\" --verbose"
        }
      ]
    },
    "test:cdk-nag:webapp": {
      "name": "test:cdk-nag:webapp",
      "description": "Run CDK Nag security tests for webapp use case",
      "steps": [
        {
          "exec": "jest --testPathPattern=\"webapp.*nag\\.test\\.(ts|js)$\" --verbose"
        }
      ]
    },
    "test:document-processing": {
      "name": "test:document-processing",
      "description": "Run all document processing use case tests",
      "steps": [
        {
          "exec": "jest --testPathPattern=\"use-cases/document-processing/tests/.*\\.test\\.(ts|js)$\" --passWithNoTests --updateSnapshot"
        }
      ]
    },
    "test:document-processing:unit": {
      "name": "test:document-processing:unit",
      "description": "Run document processing unit tests (excluding nag tests)",
      "steps": [
        {
          "exec": "jest --testPathPattern=\"use-cases/document-processing/tests/.*\\.test\\.(ts|js)$\" --testPathIgnorePatterns=\".*nag\\.test\\.(ts|js)$\" --passWithNoTests --updateSnapshot"
        }
      ]
    },
    "test:security": {
      "name": "test:security",
      "description": "Run security-focused tests including CDK Nag analysis",
      "steps": [
        {
          "spawn": "test:cdk-nag:all"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "test:webapp": {
      "name": "test:webapp",
      "description": "Run all webapp use case tests",
      "steps": [
        {
          "exec": "jest --testPathPattern=\"use-cases/webapp/tests/.*\\.test\\.(ts|js)$\" --passWithNoTests --updateSnapshot"
        }
      ]
    },
    "test:webapp:core": {
      "name": "test:webapp:core",
      "description": "Run core webapp construct tests only",
      "steps": [
        {
          "exec": "jest --testPathPattern=\"use-cases/webapp/tests/webapp\\.test\\.(ts|js)$\" --passWithNoTests --updateSnapshot"
        }
      ]
    },
    "test:webapp:frontend": {
      "name": "test:webapp:frontend",
      "description": "Run webapp frontend construct tests only",
      "steps": [
        {
          "exec": "jest --testPathPattern=\"use-cases/webapp/tests/frontend-construct\\.test\\.(ts|js)$\" --passWithNoTests --updateSnapshot"
        }
      ]
    },
    "test:webapp:quickstart": {
      "name": "test:webapp:quickstart",
      "description": "Run webapp quickstart tests only",
      "steps": [
        {
          "exec": "jest --testPathPattern=\"use-cases/webapp/tests/webapp-quickstart\\.test\\.(ts|js)$\" --passWithNoTests --updateSnapshot"
        }
      ]
    },
    "test:webapp:unit": {
      "name": "test:webapp:unit",
      "description": "Run webapp unit tests (excluding nag tests)",
      "steps": [
        {
          "exec": "jest --testPathPattern=\"use-cases/webapp/tests/.*\\.test\\.(ts|js)$\" --testPathIgnorePatterns=\".*nag\\.test\\.(ts|js)$\" --passWithNoTests --updateSnapshot"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "echo No dependencies to upgrade."
        }
      ]
    },
    "upgrade-cdklabs-projen-project-types": {
      "name": "upgrade-cdklabs-projen-project-types",
      "description": "upgrade cdklabs-projen-project-types",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=latest --peer --no-deprecated --dep=dev,peer,prod,optional --filter=cdklabs-projen-project-types,projen"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade cdklabs-projen-project-types projen"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "upgrade-dev-deps": {
      "name": "upgrade-dev-deps",
      "description": "upgrade dev dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev --filter=@types/jest,eslint-import-resolver-typescript,eslint-plugin-import,jest,jsii-diff,jsii-pacmak,jsii-rosetta,ts-jest,ts-node,typescript,cdk-nag"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @stylistic/eslint-plugin @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser commit-and-tag-version eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit jsii-diff jsii-docgen jsii-pacmak jsii-rosetta jsii ts-jest ts-node typescript @aws-cdk/integ-runner @aws-cdk/integ-tests-alpha cdk-nag"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
